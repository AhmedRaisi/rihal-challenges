@inject StudentService StudentService
@using RihalChallengeApp.Services
@using MudBlazor
@using MudBlazor.Charts

<h3>Statistics</h3>

@if (studentCountPerClass != null && studentCountPerCountry != null && averageAge.HasValue)
{
    <MudPaper Elevation="3" Class="pa-4 ma-4">
        <h4>Students per Class</h4>
        <MudChart ChartType="ChartType.Bar" InputData="@studentsPerClassData" InputLabels="@studentsPerClassLabels" />
    </MudPaper>

    <MudPaper Elevation="3" Class="pa-4 ma-4">
        <h4>Students per Country</h4>
        <MudChart ChartType="ChartType.Pie" InputData="@studentsPerCountryData" InputLabels="@studentsPerCountryLabels" />
    </MudPaper>

    <MudPaper Elevation="3" Class="pa-4 ma-4">
        <h4>Average Age of Students</h4>
        <div>Average Age: @averageAge.Value.ToString("0.00") years</div>
        <!-- You can add a graphical representation for the average age if needed -->
    </MudPaper>
}
else
{
    <p>Loading statistics...</p>
}

@code {
    private Dictionary<string, int> studentCountPerClass;
    private Dictionary<string, int> studentCountPerCountry;
    private double? averageAge;
    private double[] studentsPerClassData;
    private string[] studentsPerClassLabels;
    private double[] studentsPerCountryData;
    private string[] studentsPerCountryLabels;

    protected override async Task OnInitializedAsync()
    {
        studentCountPerClass = await StudentService.GetStudentCountPerClassAsync();
        studentsPerClassData = studentCountPerClass.Values.Select(v => (double)v).ToArray();
        studentsPerClassLabels = studentCountPerClass.Keys.ToArray();

        studentCountPerCountry = await StudentService.GetStudentCountPerCountryAsync();
        studentsPerCountryData = studentCountPerCountry.Values.Select(v => (double)v).ToArray();
        studentsPerCountryLabels = studentCountPerCountry.Keys.ToArray();

        averageAge = await StudentService.GetAverageAgeOfStudentsAsync();
    }
}
