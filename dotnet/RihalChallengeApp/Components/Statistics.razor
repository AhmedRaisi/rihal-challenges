@inject StudentService StudentService
@using RihalChallengeApp.Services
@using MudBlazor
@using MudBlazor.Charts
@using Microsoft.Extensions.Logging

<h3>Statistics</h3>

@if (studentCountPerClass != null && studentCountPerCountry != null && averageAge.HasValue)
{
    <MudPaper Elevation="3" Class="pa-4 ma-4">
        <h4>Students per Class</h4>
        @if (studentsPerClassData.All(d => !double.IsNaN(d)))
        {
            <MudChart ChartType="ChartType.Pie" InputData="@studentsPerClassData" InputLabels="@studentsPerClassLabels" />
        }
        else
        {
            <p>Invalid data for Students per Class chart.</p>
        }
    </MudPaper>

    <MudPaper Elevation="3" Class="pa-4 ma-4">
        <h4>Students per Country</h4>
        <MudChart ChartType="ChartType.Pie" InputData="@studentsPerCountryData" InputLabels="@studentsPerCountryLabels" />
    </MudPaper>

    <MudPaper Elevation="3" Class="pa-4 ma-4">
        <h4>Average Age of Students</h4>
        <div>Average Age: @averageAge.Value.ToString("0.00") years</div>
    </MudPaper>
}
else
{
    <p>Loading statistics...</p>
}

@code {
    [Inject]
    private ILogger<Statistics> Logger { get; set; }

    private Dictionary<string, int> studentCountPerClass;
    private Dictionary<string, int> studentCountPerCountry;
    private double? averageAge;
    private double[] studentsPerClassData;
    private string[] studentsPerClassLabels;
    private double[] studentsPerCountryData;
    private string[] studentsPerCountryLabels;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            studentCountPerClass = await StudentService.GetStudentCountPerClassAsync();
            studentsPerClassData = studentCountPerClass.Values.Select(v => (double)v).ToArray();
            studentsPerClassLabels = studentCountPerClass.Keys.ToArray();

            Logger.LogInformation("Students per Class Data: {Data}", studentsPerClassData);
            Logger.LogInformation("Students per Class Labels: {Labels}", studentsPerClassLabels);

            // Additional logging to check for NaN values
            if (studentsPerClassData.Any(d => double.IsNaN(d)))
            {
                Logger.LogWarning("NaN values detected in Students per Class Data.");
            }

            studentCountPerCountry = await StudentService.GetStudentCountPerCountryAsync();
            studentsPerCountryData = studentCountPerCountry.Values.Select(v => (double)v).ToArray();
            studentsPerCountryLabels = studentCountPerCountry.Keys.ToArray();

            Logger.LogInformation("Students per Country Data: {Data}", studentsPerCountryData);
            Logger.LogInformation("Students per Country Labels: {Labels}", studentsPerCountryLabels);

            averageAge = await StudentService.GetAverageAgeOfStudentsAsync();
            Logger.LogInformation("Average Age: {AverageAge}", averageAge);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error occurred while initializing statistics.");
        }
    }
}
